import java.text.SimpleDateFormat

description = "Cucumber Module"

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'org.yaml', name: 'snakeyaml', version: '1.19'
    }
}

apply plugin: 'groovy'
apply plugin: 'maven-publish'

repositories {
    maven {
        url = uri('http://repo.maven.apache.org/maven2/')
    }

    maven {
        url = uri('http://repo1.maven.org/maven2/org/seleniumhq/selenium/')
    }

    maven {
        url = uri('http://repo.maven.apache.org/maven2')
    }
    mavenLocal()
}

configurations {
    cucumberRuntime {
        extendsFrom testImplementation
    }
}

sourceCompatibility = '8'

dependencies {
    implementation 'org.seleniumhq.selenium:selenium-java:3.141.59'
    implementation 'org.seleniumhq.selenium:selenium-server:3.141.59'
    implementation 'org.seleniumhq.selenium:selenium-remote-driver:3.141.59'
    implementation 'org.seleniumhq.selenium:selenium-chrome-driver:3.141.59'
    implementation 'org.seleniumhq.selenium:selenium-firefox-driver:3.141.59'
    implementation 'org.seleniumhq.selenium:selenium-support:3.141.59'
    implementation 'org.seleniumhq.selenium:selenium-api:3.141.59'
    implementation group: 'org.codehaus.groovy', name: 'groovy', version: '2.5.12'

    testImplementation 'io.github.bonigarcia:webdrivermanager:3.8.1'
    testImplementation 'io.cucumber:cucumber-core:5.6.0'
    testImplementation 'io.cucumber:cucumber-java:5.6.0'
    testImplementation 'io.cucumber:cucumber-junit:5.6.0'
    testImplementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'

}

task cucumber(group: "cucumber") {
    dependsOn assemble, compileTestJava
    doLast {
        def r = file("${project.buildDir}/cucumber")
        javaexec {
            main = "io.cucumber.core.cli.Main"
            systemProperties = [
                    "cucumber.headless"            : project.property("cucumber.headless"),
                    "cucumber.config.path"         : project.property("cucumber.config.path"),
                    "cucumber.config.env"          : project.property("cucumber.config.env"),
                    "cucumber.download.path"       : project.property("cucumber.download.path"),
                    "cucumber.browserstack.enabled": project.property("cucumber.browserstack.enabled")
            ]
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = [
                    '-p', "json:build/cucumber/json/report.json",
                    '-p', 'pretty',
                    '-p', 'html:build/cucumber/html',
                    'src/test/resources/cucumber/features']
//            args = ['--help']
        }
    }
}

task cucumberBrowserstack(group: "cucumber") {

}

def yamlParser = new org.yaml.snakeyaml.Yaml()
def yaml = yamlParser.load(file("${project.projectDir}/src/test/resources/browserstack.yml").newInputStream())
def buildTime = getBuildTime()
yaml.browserstack.desktop.each { d ->
    createBrowserstackTask(d)
}

yaml.browserstack.mobile.each { m ->
    createBrowserstackTask(m)
}


def createBrowserstackTask(d) {
    String taskName = "_cucumberBrowser${d['name'].replaceAll('-', '')}"
    def bs = [:]
    def keys = d.keySet() as List
    keys.add("project")
    keys.add("build")
    bs["cucumber.browserstack.capabilities.keys"] = keys.join(",")
    d.each { k, v ->
        bs["cucumber.browserstack.capabilities.key.$k"] = v
    }
    bs["cucumber.browserstack.capabilities.key.project"] = "qa-automation"
    bs["cucumber.browserstack.capabilities.key.build"] = "qa-automation-${buildTime}"

    task "$taskName" {
        dependsOn assemble, compileTestJava
        doLast {
            javaexec {
                main = "io.cucumber.core.cli.Main"
                systemProperties = [
                        "cucumber.headless"               : project.property("cucumber.headless"),
                        "cucumber.config.path"            : project.property("cucumber.config.path"),
                        "cucumber.config.env"             : project.property("cucumber.config.env"),
                        "cucumber.download.path"          : project.property("cucumber.download.path"),
//                        "cucumber.browserstack.enabled"   : project.property("cucumber.browserstack.enabled"),
                        "cucumber.browserstack.enabled"   : "true",

                        "cucumber.browserstack.username"  : project.property("cucumber.browserstack.username"),
                        "cucumber.browserstack.password"  : project.property("cucumber.browserstack.password"),
                        "cucumber.browserstack.url.scheme": project.property("cucumber.browserstack.url.scheme"),
                        "cucumber.browserstack.url.host"  : project.property("cucumber.browserstack.url.host"),
                        "cucumber.browserstack.url.path"  : project.property("cucumber.browserstack.url.path")
                ]
                systemProperties.putAll(bs)

                classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
                args = [
                        '-p', "json:build/cucumber/json/report.json",
                        '-p', 'pretty',
                        '-p', 'html:build/cucumber/html',
                        '-t', '@browserstack',
                        'src/test/resources/cucumber/features']
//            args = ['--help']
            }
        }
    }
    cucumberBrowserstack.dependsOn(taskName)
}

def getBuildTime() {
    def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    return df.format(new Date())
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useTestNG()
}